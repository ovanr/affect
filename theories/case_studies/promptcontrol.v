From stdpp Require Import base list.
From iris.proofmode Require Import base tactics.
From iris.algebra Require Import excl_auth.

(* Local imports *)
From affect.lib Require Import base.
From affect.lang Require Import affect.
From affect.logic Require Import sem_def.
From affect.logic Require Import sem_env.
From affect.logic Require Import sem_sig.
From affect.logic Require Import sem_row.
From affect.logic Require Import sem_types.
From affect.logic Require Import ewpw.
From affect.logic Require Import sem_judgement.
From affect.logic Require Import sem_operators.
From affect.logic Require Import compatibility.
From affect.logic Require Import tactics.

Definition handler_alt (m : mode) : val := (
  rec: "H" "e" "op" "h" "r" :=
    shandler m "e" "op" (Œª: "x" "k", "H" (Œª: <>, "h" "x" "k") "op" "h" "r") "r"
)%V.

Arguments handler_alt : simpl never.

Definition HandlerAlt (m : mode) (e : expr) (op : operation) (h r : expr) : expr :=
  handler_alt m (Œª: <>, e)%E (effect op) h r.

Definition HandlerAltV (m : mode) (e : expr) (op : operation) (h r : expr) : expr :=
  handler_alt m (Œª: <>, e)%V (effect op) h r.

Notation "'handle-alt[' m ']:' e 'by' op '=>' h | 'ret' => r 'end'" :=
  (HandlerAlt m e op h r)
  (e, op, h, r at level 200, only parsing) : expr_scope.

Notation "'handle-alt:' e 'by' op '=>' h | 'ret' => r 'end'" :=
  (HandlerAlt OS e op h r)
  (e, op, h, r at level 200, only parsing) : expr_scope.

Notation "'handle-alt‚Çò:' e 'by' op '=>' h | 'ret' => r 'end'" :=
  (HandlerAlt MS e op h r)
  (e, op, h, r at level 200, only parsing) : expr_scope.

Definition control : val := (Œª: "f", perform: "ctrl" "f")%V.

Definition prompt : val := 
  (Œª: "e", 
    handle-alt: "e" #() by 
      "ctrl" => (Œª: "x" "k", "x" "k")
    |  ret   => (Œª: "x", "x")
    end)%V.

Section handler_alt.

  Context `{!heapGS Œ£}.
  
  Notation handler_alt_spec_type Œ£ :=
    (coPset -d> operation-d> sem_sig Œ£ -d> sem_row Œ£ -d> mode -d> (val -d> iPropO Œ£) 
            -d> expr -d> expr
            -d> sem_row Œ£ -d> (val -d> iPropO Œ£) -d> iPropO Œ£) (only parsing).
  
    (* Correctness of the effect branch. *)
  Definition handler_alt_spec `{irisGS eff_lang Œ£} : handler_alt_spec_type Œ£ := (
    Œª E op œÉ œÅ mh Œ¶ h r œÅ' Œ¶',
    
    (* Subsumption on row *)
    (œÅ ‚â§·µ£ œÅ') ‚àó
  
    ‚ñ° (
    (* Correctness of the return branch. *)
      (‚àÄ (v : val), Œ¶ v -‚àó EWPW r v @ E <| œÅ' |> {{ Œ¶' }}) ‚àß
  
    (* Correctness of the effect branch. *)
      ‚àÄ (v k : val),
        iEff_car (upcl mh œÉ) v (Œª w, EWPW k w @ E <| (op, œÉ) ¬∑ œÅ |> {{ Œ¶ }}) -‚àó
        EWPW h v k @ E <| (op, œÉ) ¬∑ œÅ |> {{ Œ¶ }}
    ))%I.
  
  Lemma ewpw_handler_alt E (op : operation) mh œÉ œÅ œÅ' e (h r : val) Œ¶ Œ¶' :
    EWPW e @ E <| (op, œÉ) ¬∑ œÅ |> {{ Œ¶ }} -‚àó
    handler_alt_spec E op œÉ œÅ mh Œ¶ h r œÅ' Œ¶' -‚àó
    EWPW (HandlerAltV mh e op h r) @E <| œÅ' |> {{ Œ¶' }}.
  Proof.
    iIntros "He H". rewrite /HandlerAltV. 
    iL√∂b as "IH" forall (e). rewrite /handler_alt /ewpw. 
    rewrite /handler_alt_spec.
    do 10 ewp_value_or_step. ewp_pure_steps. 
    iApply (ewpw_shandler _ op mh with "He").
    iDestruct "H" as "(#H1 & #Hbr)".
    rewrite /shandler /shandler_spec. iFrame "#%". 
    iExists True%I.
    repeat iSplit;[|done|].  
    { iIntros "%% !# H _". iApply (pmono_prot_prop with "[] H"). iIntros "!# % $ //". }
    simpl. iIntros "_ !#". iSplit.
    { iDestruct "Hbr" as "[$ _]". }
    iIntros (v k) "(%Œ¶'' & HœÉ & HPost)".
    rewrite /ewpw; do 6 ewp_value_or_step. 
    rewrite -/handler_alt. iApply ("IH" with "[HœÉ HPost]").
    { iDestruct "Hbr" as "[_ H]". iApply "H". iExists Œ¶''. iFrame. }
    iFrame "#%‚àó".
  Qed.
  
  Lemma sem_typed_handler_alt {TT : tele} m op (A B : TT ‚Üí sem_ty Œ£) œÑ œÑ' œÅ' œÅ'' Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÉ Œì' x k e h r `{ ! MultiE Œì' } :
      x ‚àâ env_dom Œì‚ÇÇ ‚Üí x ‚àâ env_dom Œì' ‚Üí x ‚àâ env_dom Œì‚ÇÉ ‚Üí x ‚àâ env_dom Œì‚ÇÇ ‚Üí k ‚àâ env_dom Œì‚ÇÇ ‚Üí k ‚àâ env_dom Œì‚ÇÉ ‚Üí k ‚àâ env_dom Œì' ‚Üí x ‚â† k ‚Üí
      let œÉ := (‚àÄ‚Çõ.. Œ±s, A Œ±s =[ m ]=> B Œ±s)%S in
      let œÅ := ((op, œÉ) ¬∑ œÅ')%R in
      œÅ' ‚â§·µ£ œÅ'' -‚àó
      Œì‚ÇÅ ‚ä® e : œÅ : œÑ ‚´§ Œì‚ÇÇ -‚àó
      (‚àÄ.. Œ±s, (x, A Œ±s) :: (k, B Œ±s -{ œÅ }-[m]-> œÑ) :: Œì' ‚ä® h : œÅ : œÑ ‚´§ Œì‚ÇÇ) -‚àó
      (x, œÑ) :: Œì‚ÇÇ ++ Œì' ‚ä® r : œÅ'' : œÑ' ‚´§ Œì‚ÇÉ -‚àó
      Œì‚ÇÅ ++ Œì' ‚ä® (handle-alt[m]: e by 
                     op => (Œª: x k, h)
                  | ret => (Œª: x, r) end)%E : œÅ'' : œÑ' ‚´§ Œì‚ÇÉ.
    Proof.
      iIntros (??????????) "#Hle #He #Hh #Hr !# %vs HŒì‚ÇÅŒì' /=".
      iDestruct (env_sem_typed_app with "HŒì‚ÇÅŒì'") as "[HŒì‚ÇÅ #HŒì']". 
      do 4 ewpw_value_or_step. iDestruct "He" as "-#He".
      iSpecialize ("He" $! vs with "HŒì‚ÇÅ").
      iRevert "He". iL√∂b as "IH" forall (e). iIntros "He".
      ewpw_pure_steps. 
      iApply (ewpw_handler_alt _ _ m with "He [HŒì']").
      rewrite /handler_alt.
      repeat iSplit; first done. iModIntro. iSplit. 
      - iIntros (v) "[HœÑ HŒì‚ÇÇ]". ewpw_pure_steps. rewrite - subst_map_insert. 
        iApply (ewpw_mono with "[HŒì‚ÇÇ HŒì' HœÑ]").
        { iApply "Hr". solve_env. iApply env_sem_typed_app; solve_env. }
        iIntros "!# %w [$ HŒì‚ÇÉ] !>". solve_env.
      - iIntros (v k') "(%Œ¶ & HœÅ & HPost)".
        rewrite sem_sig_eff_mbang_eq. iDestruct "HœÅ" as "(%Œ±s & %a & <- & Ha & HŒ∫b)".
        ewpw_pure_steps. solve_dec. 
        rewrite delete_commute - subst_map_insert. 
        rewrite - delete_insert_ne // - subst_map_insert.
        iApply (ewpw_mono with "[Hh Ha HŒ∫b HPost]").
        + iApply "Hh". solve_env; last (do 2 (rewrite - env_sem_typed_insert; solve_env)).
          destruct m; simpl.
          * rewrite /sem_ty_mbang /sem_ty_arr /=. iIntros (?) "HB". 
            iApply (ewpw_mono with "[HŒ∫b HPost HB]").
            { iApply ("HPost" with "[HŒ∫b HB]"). by iApply "HŒ∫b". }
            iIntros "!# % [$ _] //".
          * rewrite /sem_ty_mbang /sem_ty_arr /=. 
            iDestruct "HŒ∫b" as "#HŒ∫b". iDestruct "HPost" as "#HPost". 
            iIntros "!# % HB". 
            iApply (ewpw_mono with "[HŒ∫b HPost HB]").
            { iApply ("HPost" with "[HŒ∫b HB]"). by iApply "HŒ∫b". }
            iIntros "!# % [$ _] //".
        + iIntros "!# /= % [$ H] !>". do 2 (rewrite - env_sem_typed_insert //).
    Qed.
  
End handler_alt.

Section typing.

  (* Make all the definitions opaque so that we do not rely on their definition in the model to show that the programs are well-typed terms. *)
  Opaque sem_typed sem_typed_val ty_le row_le sig_le row_type_sub row_env_sub.
  Opaque sem_ty_bot sem_ty_unit sem_ty_bool sem_ty_int sem_ty_string sem_ty_top sem_ty_mbang env_mbang sem_ty_ref_cpy sem_ty_ref sem_ty_prod sem_ty_sum sem_ty_arr sem_ty_type_forall sem_ty_row_forall sem_ty_exists sem_ty_rec sem_ty_option.
  Opaque sem_sig_eff sem_sig_flip_mbang.
  Opaque sem_row_nil sem_row_flip_mbang sem_row_cons sem_row_rec.

  Context `{!heapGS Œ£}.

  Definition ctrl_sig (Œ≤ : sem_ty Œ£) (ctrl : sem_row Œ£) : sem_sig Œ£ := 
      (‚àÄ‚Çõ Œ± , ((Œ± -{ ctrl }-‚àò Œ≤) -{ ctrl }-‚àò Œ≤) =[ OS ]=> Œ±)%S.

  Definition ctrl_pre (Œ≤ : sem_ty Œ£) (ctrl : sem_row Œ£) : sem_row Œ£ := 
      (("ctrl", ctrl_sig Œ≤ ctrl) ¬∑ ‚ü®‚ü©)%R.

  Global Instance ctrl_sig_ne Œ≤ : NonExpansive (ctrl_sig Œ≤).
  Proof.
    rewrite /ctrl_sig. intros ????. f_equiv.
    rewrite /tele_app. repeat f_equiv; intros ?; by repeat f_equiv.
  Qed.

  Local Instance contractive_ctrl_pre Œ≤ : Contractive (ctrl_pre Œ≤).
  Proof.
    intros ????. rewrite /ctrl_pre. do 3 f_equiv. 
    destruct n; first apply dist_later_0.
    apply dist_later_S. rewrite - dist_later_S in H.
    by f_equiv.
  Qed.

  Definition ctrl Œ≤ : sem_row Œ£ := (Œº·µ£ Œ∏, ctrl_pre Œ≤ Œ∏)%R.

  Local Instance ctrl_os_row Œ≤ : OnceR (ctrl Œ≤).
  Proof. apply _. Qed.

  Definition ctrl_ty : sem_ty Œ£ := 
    (‚àÄ‚Çú Œ±, ‚àÄ‚Çú Œ≤, ((Œ± -{ ctrl Œ≤ }-‚àò Œ≤) -{ ctrl Œ≤ }-‚àò Œ≤) -{ ctrl Œ≤ }-> Œ±)%T.

  Definition prompt_ty : sem_ty Œ£ := 
    (‚àÄ‚Çú Œ±, (ùüô -{ ctrl Œ± }-‚àò Œ±) ‚Üí Œ±)%T.

  Lemma ctrl_typed : ‚ä¢ ‚ä®·µ• control : ctrl_ty.
  Proof.
    iIntros. rewrite /control /ctrl_ty.
    iApply sem_typed_Tclosure. iIntros (Œ±).
    iApply sem_typed_Tclosure. iIntros (Œ≤).
    iApply sem_typed_closure; first done. simpl.
    iApply sem_typed_sub_row; first iApply row_le_rec_fold.
    rewrite /ctrl_pre -/(ctrl Œ≤).
    iApply (sem_typed_perform_os (TT:=[tele _]) [tele_arg (Œ± : sem_ty Œ£)] _ "ctrl" _ (tele_app (Œª Œ±, Œ±))).
    iApply sem_typed_var'.
  Qed.

  Lemma prompt_typed : ‚ä¢ ‚ä®·µ• prompt : prompt_ty.
  Proof.
    iIntros. rewrite /prompt /prompt_ty.
    iApply sem_typed_Tclosure. iIntros (Œ≤).
    iApply sem_typed_closure; first done. simpl.
    rewrite - (app_nil_r [("e", _)]).
    set Œì‚ÇÅ := [("e", ùüô -{ ctrl Œ≤ }-‚àò Œ≤)].
    smart_apply (sem_typed_handler_alt (TT:=[tele _]) OS "ctrl" (tele_app (Œª Œ±, (Œ± -{ ctrl Œ≤ }-‚àò Œ≤) -{ ctrl Œ≤ }-‚àò Œ≤)) (tele_app (Œª Œ±,  Œ±)) Œ≤ Œ≤ ‚ü®‚ü©%R ‚ü®‚ü©%R Œì‚ÇÅ [] [] []).
    { iApply row_le_nil. }
    - rewrite /Œì‚ÇÅ. iApply sem_typed_sub_row. 
      { iApply (row_le_rec_unfold (Œª Œ∏, ctrl_pre Œ≤ Œ∏)). }
      iApply sem_typed_app_os; last iApply sem_typed_unit'.
      iApply sem_typed_var'.
    - iIntros (Œ±). iApply sem_typed_swap_second. 
      iApply sem_typed_app_os; last iApply sem_typed_var'.
      iApply sem_typed_sub_nil. rewrite -/ctrl_pre.
      iApply sem_typed_sub_ty.
      + iApply ty_le_arr; [|iApply ty_le_mbang_elim|iApply ty_le_refl]. 
        { iApply (row_le_rec_unfold (Œª Œ∏, ctrl_pre Œ≤ Œ∏)). }
      + iApply sem_typed_sub_ty.
        iApply ty_le_arr; [iApply row_le_refl|iApply ty_le_arr|iApply ty_le_refl]; try iApply ty_le_refl. 
        { iApply (row_le_rec_fold (Œª Œ∏, ctrl_pre Œ≤ Œ∏)). }
        iApply sem_typed_var'.
    - iApply sem_typed_var.
  Qed.

End typing.
