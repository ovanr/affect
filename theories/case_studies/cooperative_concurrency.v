
From stdpp Require Import base list.
From iris.proofmode Require Import base tactics.
From iris.algebra Require Import excl_auth.

(* Local imports *)
From affect.lib Require Import base.
From affect.lang Require Import affect.
From affect.logic Require Import sem_def.
From affect.logic Require Import sem_env.
From affect.logic Require Import sem_sig.
From affect.logic Require Import mode.
From affect.logic Require Import sem_row.
From affect.logic Require Import sem_types.
From affect.logic Require Import sem_judgement.
From affect.logic Require Import sem_operators.
From affect.logic Require Import compatibility.
From affect.logic Require Import tactics.

(* Make all the definitions opaque so that we do not rely on their definition in the model to show that the programs are well-typed terms. *)
Opaque sem_typed sem_typed_val ty_le row_le sig_le row_type_sub row_env_sub.
Opaque sem_ty_bot sem_ty_unit sem_ty_bool sem_ty_int sem_ty_string sem_ty_top sem_ty_mbang env_mbang sem_ty_ref_cpy sem_ty_ref sem_ty_prod sem_ty_sum sem_ty_arr sem_ty_type_forall sem_ty_row_forall sem_ty_exists sem_ty_rec sem_ty_option.
Opaque sem_sig_eff sem_sig_flip_mbang.
Opaque sem_row_nil sem_row_flip_mbang sem_row_cons sem_row_rec.

Definition impossible : expr := ((rec: "f" <> := "f" #()) #())%E.

Definition async : val := (Œª: "c", perform: "async" "c")%V.

Definition await : val := (Œª: "p", perform: "await" "p")%V.

Definition yield : val := 
  (Œª: <>, await (async (Œª: <>, #())))%V. 

Definition iter  : val:= 
  (rec: "f" "g" "xs" := 
    list-match: "xs" with
        CONS "x" => "xxs" => "g" "x" ;; "f" "g" "xxs"
      | NIL => #()
    end)%V.

Definition next : val :=
  (Œª: "q" <>, list-match: "q" <!- NIL with
              CONS "x" => "xs" => "q" <!- "xs" ;; "x" #()
            | NIL => #()
          end)%V.

Definition add : val := 
  (Œª: "q" "f", "q" <!- CONS "f" ("q" <!- NIL) ;; #())%V.

Definition resume_task : val := 
  (Œª: "add", Œª: "v" "k", "add" (Œª: <>, "k" "v"))%V.

Definition runner : val :=
  (Œª: "main", 
    let: "q" := ref NIL in  

    let: "add" := add "q" in
    let: "next" := next "q" in
    let: "resume_task" := resume_task "add" in

    let: "fulfill" := 
      (rec: "fulfill" "promise" := Œª: "comp",   
          handle2: "comp" #() by
            "async" => (Œª: "x" "k", 
                  let: "new_prom" := ref (InjR NIL) in
                  "add" (Œª: <>, "fulfill" "new_prom" "x") ;;
                  "k" "new_prom"
            )
          | "await" => (Œª: "x" "k", 
                  match: "x" <!- (InjR NIL) with
                    InjL "v" => "x" <!- (InjL "v") ;; "k" "v"
                  | InjR "ks" => "x" <!- InjR (CONS "k" "ks") ;; "next" #()
                  end
                )
          | ret => (Œª: "x", 
              let: "v" := "promise" <!- InjR NIL in
              match: "v" with
                InjL <> => impossible
              | InjR "ks" =>
                  "promise" <!- InjL "x" ;;
                  iter ("resume_task" "x") "ks" ;;
                  "next" #()
              end)%E
          end)
      in
      let: "pmain" := ref (InjR NIL) in
      "fulfill" "pmain" "main" ;;
      match: "pmain" <!- InjR NIL with
        InjL "v" => "v"
      | InjR <> => impossible
      end
  )%V.

Section typing.

  Context `{!heapGS Œ£}.

  Definition Queue := Ref·∂ú (List (ùüô ‚ä∏ ùüô)).

  Definition Status œÑ := œÑ + List (œÑ ‚ä∏ ùüô).

  Definition Promise œÑ := Ref·∂ú (Status œÑ).

  Definition await_sig : sem_sig Œ£ := (‚àÄ‚Çõ Œ±, (Promise (! Œ±)) =[ OS ]=> (! Œ±))%S.

  Definition async_sig (Œ∏ : sem_row Œ£) : sem_sig Œ£ := 
    (‚àÄ‚Çõ Œ±, ( ùüô -{ Œ∏ }-‚àò ! Œ± ) =[ OS ]=> Promise (! Œ±))%S. 

  Definition coop_pre (Œ∏ : sem_row Œ£) : sem_row Œ£ := 
    (("async", async_sig Œ∏) ¬∑ ("await", await_sig) ¬∑ ‚ü®‚ü©)%R.


  Local Instance await_sig_ne :
    NonExpansive (Œª (Œ± : sem_ty Œ£), Promise (! Œ±)).
  Proof.
    rewrite /Promise /Status. 
    intros ????. by repeat f_equiv.
  Qed.

  Local Instance async_sig_ne Œ∏ :
    NonExpansive (Œª (Œ± : sem_ty Œ£), ùüô -{ Œ∏ }-‚àò ! Œ±).
  Proof.
    intros ????. by repeat f_equiv.
  Qed.

  Local Instance async_sig_2_ne : NonExpansive async_sig.
  Proof.
    rewrite /async_sig.
    intros ?????. apply non_dep_fun_dist.
 f_equiv. rewrite /tele_app. intros []; simpl; apply non_dep_fun_dist;
    repeat f_equiv; intros ?; by repeat f_equiv.
  Qed.

  Local Instance contractive_coop_pre : Contractive coop_pre.
  Proof. 
    intros ????. rewrite /coop_pre. do 3 f_equiv. 
    destruct n; first apply dist_later_0.
    apply dist_later_S. rewrite - dist_later_S in H.
    by f_equiv.
  Qed.

  Definition coop : sem_row Œ£ := (Œº·µ£ Œ∏, coop_pre Œ∏)%R.

  Local Instance await_res_sig_ne :
    NonExpansive (Œª (Œ± : sem_ty Œ£), ! Œ±).
  Proof. intros ????. by repeat f_equiv. Qed.

  Local Instance coop_os_row : OnceR coop.
  Proof. apply _. Qed.

  Definition iter_ty œÑ := (‚àÄ·µ£ Œ∏, (œÑ -{ ¬° Œ∏ }-> ùüô) ‚Üí List œÑ -{ ¬° Œ∏ }-‚àò ùüô)%T.
  
  Definition next_ty := (ùüô ‚Üí ùüô)%T.

  Definition add_ty := ((ùüô ‚ä∏ ùüô) ‚Üí ùüô)%T.

  Definition resume_task_ty := (‚àÄ‚Çú Œ±, ! Œ± ‚Üí (! Œ± ‚ä∏ ùüô) ‚Üí ùüô)%T.
  
  Definition runner_ty := (‚àÄ‚Çú Œ±, (ùüô -{ coop }-‚àò ! Œ±) ‚Üí ! Œ±)%T.

  Lemma impossible_typed œÑ :
    ‚ä¢ ‚ä® impossible : ‚ü®‚ü© : œÑ.
  Proof.
    iIntros. rewrite /impossible.
    iApply sem_typed_app_os; [|iApply sem_typed_unit].
    rewrite - {1} (app_nil_r []).
    iApply sem_typed_sub_u2aarr.
    smart_apply sem_typed_ufun. simpl.
    iApply sem_typed_app_os; [|iApply sem_typed_unit].
    iApply sem_typed_sub_u2aarr.
    iApply sem_typed_var.
  Qed.

  Lemma async_typed :
    ‚ä¢ ‚ä®·µ• async : (‚àÄ‚Çú Œ±, (ùüô -{ coop }-‚àò ! Œ±) -{ coop }-> Promise (! Œ±)).
  Proof.
    rewrite /async. iIntros.
    iApply sem_typed_Tclosure. iIntros (Œ±).
    smart_apply sem_typed_closure. simpl. rewrite /coop.
    iApply sem_typed_sub_row; first iApply row_le_rec_fold.
    rewrite /coop_pre -/coop.
    iApply (sem_typed_perform_os (TT:=[tele _]) [tele_arg (Œ± : sem_ty Œ£)] _ "async"
                                 (tele_app (Œª Œ±, ùüô -{ coop }-‚àò ! Œ±)) (tele_app (Œª Œ±, Promise (! Œ±)))).
    iApply sem_typed_var'.
  Qed.

  Lemma await_typed :
    ‚ä¢ ‚ä®·µ• await : (‚àÄ‚Çú Œ±, Promise (! Œ±) -{ coop }-> ! Œ±).
  Proof.
    rewrite /await. iIntros.
    iApply sem_typed_Tclosure. iIntros (Œ±).
    smart_apply sem_typed_closure. simpl.
    iApply sem_typed_sub_row; first iApply row_le_rec_fold.
    rewrite /coop_pre -/coop. 
    iApply sem_typed_sub_row; first iApply row_le_swap_second; first done.
    iApply (sem_typed_perform_os (TT:=[tele _]) [tele_arg (Œ± : sem_ty Œ£)] _ "await" 
                                 (tele_app (Œª Œ±, Promise (! Œ±))) (tele_app (Œª Œ±, ! Œ±))).
    iApply sem_typed_var'.
  Qed.

  Lemma yield_typed :
    ‚ä¢ ‚ä®·µ• yield : ( ùüô -{ coop }-> ùüô ).
  Proof.
    iIntros. iApply sem_typed_closure; first done. simpl.
    iApply (sem_typed_app_os (Promise (! ùüô))).
    - iApply sem_typed_sub_u2aarr.
      iApply sem_typed_sub_ty; [iApply ty_le_uarr|]; 
        [iApply row_le_refl|iApply ty_le_refl|iApply (ty_le_mbang_elim MS)|].
      iApply sem_typed_sub_nil. simpl. rewrite -/coop.
      set C := (Œª Œ±, (Promise (! Œ±)) -{ coop }-> (! Œ±)).
      rewrite -/(C ùüô). iApply sem_typed_TApp.
      iApply sem_typed_val. iApply await_typed.
    - iApply (sem_typed_app_os (ùüô -{ coop }-‚àò ! ùüô)).
      + iApply sem_typed_sub_nil. iApply sem_typed_sub_u2aarr.
        set C := (Œª Œ±, (ùüô -{ coop }-‚àò ! Œ±) -{ coop }-> Promise (! Œ±)).
        rewrite -/(C ùüô). iApply sem_typed_TApp.
        iApply sem_typed_val. iApply async_typed.
      + iApply sem_typed_sub_nil.
        rewrite - {1} (app_nil_r []).
        smart_apply sem_typed_afun. simpl.
        iApply sem_typed_sub_ty; [iApply (ty_le_mbang_intro_unit)|].
        iApply sem_typed_unit'.
  Qed.

  Lemma iter_typed œÑ :
    ‚ä¢ ‚ä®·µ• iter : iter_ty œÑ.
  Proof.
    iApply sem_typed_Rclosure. iIntros (œÉ).
    iApply sem_typed_closure; first done. simpl.
    rewrite - [[("g", _); ("f", _)]]app_nil_r. 
    smart_apply sem_typed_afun. simpl.
    set Œì‚ÇÇ := [("g", œÑ -{ ¬° œÉ }-> ùüô);
               ("f", ((œÑ -{ ¬° œÉ }-> ùüô) ‚Üí List œÑ -{ ¬° œÉ }-‚àò ùüô)%T)].
    smart_apply (sem_typed_match_list _ _ _ _ Œì‚ÇÇ).
    - iApply sem_typed_var'.
    - do 2 iApply sem_typed_weaken. iApply sem_typed_unit'.
    - iApply sem_typed_seq.
      + iApply sem_typed_swap_third. iApply sem_typed_swap_second. 
        iApply sem_typed_app_os; [|iApply sem_typed_var'].
        iApply sem_typed_contraction.
        simpl. iApply sem_typed_sub_u2aarr.
        iApply sem_typed_var'.
      + iApply sem_typed_swap_second. rewrite -/Œì‚ÇÇ.
        do 2 (iApply sem_typed_app_os; [|iApply sem_typed_var']).
        iApply sem_typed_sub_ty. 
        { iApply ty_le_trans; [|iApply ty_le_u2aarr].
          iApply ty_le_uarr. { simpl. iApply row_le_nil. }
          iApply ty_le_refl. iApply ty_le_refl. }
        iApply sem_typed_var'.
  Qed.

  Definition add_typed :
    ‚ä¢ ‚ä®·µ• add : (Queue ‚Üí add_ty).
  Proof.
    iIntros. rewrite /add_ty.
    iApply sem_typed_closure; first done. simpl.
    set q := ("q", Queue). rewrite -(app_nil_r [q]).
    smart_apply sem_typed_ufun. simpl.
    set f := ("f", ùüô ‚ä∏ ùüô).
    iApply sem_typed_seq; [|iApply sem_typed_unit].
    iApply sem_typed_replace_cpy_os; [iApply sem_typed_var|].
    iApply sem_typed_cons.
    { iApply sem_typed_swap_second. iApply sem_typed_var. }
    iApply sem_typed_swap_second.
    iApply sem_typed_replace_cpy_os; [|iApply sem_typed_nil].
    iApply sem_typed_contraction.
    iApply sem_typed_var.
  Qed.

  Definition next_typed :
    ‚ä¢ ‚ä®·µ• next : (Queue ‚Üí next_ty).
  Proof.
    iIntros. rewrite /next_ty.
    iApply sem_typed_closure; first done. simpl.
    set q := ("q", Queue). rewrite -(app_nil_r [q]).
    smart_apply sem_typed_ufun. simpl.
    smart_apply (sem_typed_match_list _ _ _ _ [q]).
    - iApply sem_typed_replace_cpy_os; [|iApply sem_typed_nil].
      iApply sem_typed_contraction.
      iApply sem_typed_var.
    - iApply sem_typed_weaken. iApply sem_typed_unit.
    - iApply sem_typed_swap_second.
      iApply sem_typed_swap_third.
      iApply sem_typed_swap_second.
      set x := ("x", ùüô ‚ä∏ ùüô).
      set xs := ("xs", List (ùüô ‚ä∏ ùüô)).
      rewrite -/q.
      iApply sem_typed_seq.
      { iApply sem_typed_replace_cpy_os; iApply sem_typed_var. }
      iApply sem_typed_app_os; [iApply sem_typed_var|iApply sem_typed_unit].
  Qed.

  Definition resume_task_typed :
    ‚ä¢ ‚ä®·µ• resume_task : (add_ty ‚Üí resume_task_ty).
  Proof.
    iIntros. rewrite /resume_task_ty.
    iApply sem_typed_closure; first done. simpl.
    set add := ("add", add_ty)%T. rewrite -(app_nil_r [add]).
    iApply sem_typed_oval.
    iApply sem_typed_TLam.
    iIntros (Œ±).
    rewrite -(app_nil_r [add]).
    smart_apply sem_oval_typed_ufun. simpl.
    rewrite -(app_nil_r [("v", ! Œ±); add]).
    set v := ("v", ! Œ±).
    smart_apply sem_typed_ufun. simpl.
    set k := ("k", ! Œ± ‚ä∏ ùüô).
    iApply sem_typed_app_os.
    { iApply sem_typed_sub_u2aarr. iApply sem_typed_var. }
    replace ([k; v; add]) with ([k;v] ++ [add]) by done.
    smart_apply sem_typed_afun. simpl.
    iApply sem_typed_swap_second.
    iApply sem_typed_app_os; iApply sem_typed_var.
  Qed.

  Definition runner_typed :
    ‚ä¢ ‚ä®·µ• runner : runner_ty.
  Proof.
    iIntros. iApply sem_typed_Tclosure. iIntros (Œ±).
    iApply sem_typed_closure; first done. simpl.
    set main := ("main", ùüô -{ coop }-‚àò ! Œ±).
    smart_apply (sem_typed_let _ _ _ _  [main]).
    { iApply (sem_typed_alloc_cpy (List (ùüô ‚ä∏ ùüô))). iApply sem_typed_nil. }
    iApply sem_typed_contraction.
    set q := ("q", Queue).
    smart_apply (sem_typed_let _ _ _ _ [q; main]).
    { iApply sem_typed_app_os; [|iApply sem_typed_var].
      iApply sem_typed_sub_u2aarr.
      iApply sem_typed_val. iApply add_typed. }
    set add := ("add", add_ty).
    iApply sem_typed_swap_second. 
    smart_apply (sem_typed_let _ _ _ _ [add; main]). 
    { rewrite /next. iApply sem_typed_app_os; [|iApply sem_typed_var].
      iApply sem_typed_sub_u2aarr.
      iApply sem_typed_val. iApply next_typed. }
    set next := ("next", next_ty).
    iApply sem_typed_swap_second. 
    iApply sem_typed_contraction.
    smart_apply (sem_typed_let _ _ _ _ [add; next; main]).
    { iApply sem_typed_app_os; [|iApply sem_typed_var].
      iApply sem_typed_sub_u2aarr.
      iApply sem_typed_val. iApply resume_task_typed. }
    set resume_task := ("resume_task", resume_task_ty).
    rewrite -/next -/resume_task -/add.
    smart_apply (sem_typed_let _ _ _ _ [main]).
    - assert (Hrw : [resume_task;add;next;main] = [resume_task;add;next] ++ [main]) by done.
      rewrite Hrw. clear Hrw. iApply sem_typed_oval.
      smart_apply (sem_typed_ufun_poly_rec (Œª Œ≤, Promise (! Œ≤)) (Œª _, ‚ä•) (Œª Œ≤, (ùüô -{ coop }-‚àò ! Œ≤) ‚ä∏ ùüô)).
     simpl. iIntros (Œ≤) "/=". 
     set promise := ("promise", Promise (! Œ≤)).
     set fulfill := ("fulfill", ‚àÄ‚Çú Œ≤', Promise (! Œ≤') ‚Üí (ùüô -{ coop }-‚àò ! Œ≤') ‚ä∏ ùüô).
     rewrite -(app_nil_r [promise;fulfill;resume_task;add;next]).
     smart_apply sem_typed_afun. simpl.
     set comp := ("comp", ùüô -{ coop }-‚àò ! Œ≤)%T.
     replace ([comp; promise; fulfill; resume_task; add;next]) with
             ([comp] ++ [promise; fulfill; resume_task; add;next]) by done.
     smart_apply (sem_typed_handler2 (TT:=[tele _]) OS "async" "await" 
                    (tele_app (Œª Œ±, ùüô -{ coop }-‚àò ! Œ±)) 
                    (tele_app (Œª Œ±, Promise (! Œ±))) 
                    (tele_app (Œª Œ±, Promise (! Œ±))) 
                    (tele_app (Œª Œ±, ! Œ±))  _ _ _ _ [comp] []).
     + iApply row_le_refl.
     + iApply (sem_typed_app_os ùüô _ (! Œ≤)); [iApply sem_typed_var'|]. 
       rewrite -/await_sig -/(async_sig coop) -/coop. 
       iApply sem_typed_sub_env_final; first iApply env_le_cons; first iApply env_le_refl; 
       [iApply ty_le_arr; try iApply ty_le_refl; iApply (row_le_rec_unfold coop_pre)|].
       rewrite -/coop. iApply sem_typed_unit'.
     + iIntros (Œ≤').
       iApply sem_typed_swap_third. iApply sem_typed_weaken.
       iApply sem_typed_swap_fourth. iApply sem_typed_weaken.
       set x := ("x", ùüô -{ coop }-‚àò ! Œ≤').
       set k := ("k", Promise (!Œ≤') ‚ä∏ ùüô).
       rewrite -/x -/k -/fulfill -/add -/next.
       smart_apply (sem_typed_let (Promise (! Œ≤')) _ _ _ [x;k;fulfill;add;next]).
       { iApply sem_typed_alloc_cpy. iApply sem_typed_right_inj. iApply sem_typed_nil. }
       set new_prom := ("new_prom", Promise (! Œ≤')). 
       iApply (sem_typed_seq _ _ _ _ [new_prom; k; next]).
       * iApply (sem_typed_app_os (ùüô ‚ä∏ ùüô)%T _ ùüô _ [new_prom; k; add; next]).
         { iApply sem_typed_swap_third. iApply sem_typed_sub_u2aarr. iApply sem_typed_var'. }
         iApply sem_typed_swap_fourth. iApply sem_typed_swap_second.
         iApply sem_typed_contraction.
         do 2 iApply sem_typed_swap_fourth.
         assert (Hrw : [fulfill; x; new_prom; new_prom; k; add; next] = 
                       [fulfill; x; new_prom] ++ [new_prom; k; add; next]) by done.
         rewrite Hrw. clear Hrw.
         smart_apply sem_typed_afun. simpl.
         do 2 (iApply sem_typed_swap_second; iApply sem_typed_app_os; [|iApply sem_typed_var]).
         set C := (Œª Œ≤, Promise (! Œ≤) ‚Üí (ùüô -{ coop }-‚àò ! Œ≤) ‚ä∏ ùüô)%T.
         iApply sem_typed_sub_u2aarr. rewrite -/(C Œ≤').
         iApply sem_typed_TApp. iApply sem_typed_var.
      * simpl.
        iApply sem_typed_swap_third. iApply sem_typed_weaken.
        iApply sem_typed_app_os; iApply sem_typed_var'.
     + iIntros (Œ≤').
       set x := ("x", Promise (! Œ≤')).
       set k := ("k", ! Œ≤' ‚ä∏ ùüô).
       do 4 (iApply sem_typed_swap_third; iApply sem_typed_weaken).
       smart_apply (sem_typed_match (! Œ≤') _ _  _ _ [x;k;next]).
       * iApply sem_typed_replace_cpy_os; first iApply sem_typed_var.
         iApply sem_typed_contraction.
         iApply sem_typed_right_inj. iApply sem_typed_nil.
       * simpl. set v := ("v", ! Œ≤').
         iApply sem_typed_swap_fourth. iApply sem_typed_weaken.
         iApply sem_typed_contraction.
         iApply sem_typed_swap_third. iApply sem_typed_swap_second.
         iApply (sem_typed_seq _ _ _ _ [v; k]).
         { iApply sem_typed_replace_cpy_os; [iApply sem_typed_var|].
           iApply sem_typed_left_inj. iApply sem_typed_var. }
         iApply sem_typed_app_os; [iApply sem_typed_var|].
         iApply sem_typed_var.
       * simpl. set ks := ("ks", List (! Œ≤' ‚ä∏ ùüô)).
         iApply (sem_typed_seq (Status (! Œ≤'))).
         ** iApply sem_typed_swap_third. 
            iApply sem_typed_replace_cpy_os; first iApply sem_typed_var.
            iApply sem_typed_right_inj. 
            iApply sem_typed_swap_second.
            iApply sem_typed_cons; [|iApply sem_typed_var]. 
            assert (Hrw : [k; x; next] = [k] ++ [x;next]) by done.
            rewrite Hrw. clear Hrw.
            iApply sem_typed_var.
          ** iApply sem_typed_app_os; [|iApply sem_typed_unit].
             iApply sem_typed_sub_u2aarr; iApply sem_typed_var.
    + simpl. 
      iApply sem_typed_swap_third. iApply sem_typed_weaken.
      iApply sem_typed_swap_fourth; iApply sem_typed_weaken.
      iApply sem_typed_swap_second.
      set x := ("x", !Œ≤). rewrite -/resume_task -/promise.
      smart_apply (sem_typed_let _ _ _ _ [promise; x; resume_task; next]).
      * iApply sem_typed_replace_cpy_os; [|iApply sem_typed_right_inj; iApply sem_typed_nil].
        iApply sem_typed_contraction.
        iApply sem_typed_var.
      * set v := ("v", ! Œ≤ + (List (! Œ≤ ‚ä∏ ùüô))).
        smart_apply (sem_typed_match  _ _ _ _ _ [promise; x; resume_task; next]);
          [iApply sem_typed_var| |].
        { simpl. do 4 (iApply sem_typed_weaken). iApply impossible_typed. }
        simpl. iApply sem_typed_swap_second. 
        iApply sem_typed_swap_third. iApply sem_typed_contraction.
        iApply sem_typed_swap_third. iApply sem_typed_swap_second.
        set ks := ("ks", List (! Œ≤ ‚ä∏ ùüô)).
        iApply (sem_typed_seq _ _ _ _ [x; ks; resume_task; next]).
        ** iApply sem_typed_replace_cpy_os; [iApply sem_typed_var|].
           iApply sem_typed_left_inj. iApply sem_typed_var.
        ** iApply (sem_typed_seq ùüô).
           2: { iApply sem_typed_app_os; [|iApply sem_typed_unit].
                iApply sem_typed_sub_u2aarr; iApply sem_typed_var. }
           iApply sem_typed_swap_second.
           iApply sem_typed_app_os; [|iApply sem_typed_var].
           iApply (sem_typed_app_os ((! Œ≤ ‚ä∏ ùüô) ‚Üí ùüô)%T).
           2: { iApply sem_typed_app_os; [|iApply sem_typed_var]. 
                iApply sem_typed_sub_u2aarr.
                set C := Œª Œ≤, (! Œ≤ ‚Üí (! Œ≤ ‚ä∏ ùüô) ‚Üí ùüô)%T. rewrite -/(C Œ≤). simpl.
                iApply sem_typed_TApp. iApply sem_typed_var. }
           iApply sem_typed_sub_u2aarr.
           iApply sem_typed_sub_ty; first iApply ty_le_uarr; 
            [iApply row_le_refl|iApply ty_le_uarr|iApply ty_le_refl|];
            [iApply (row_le_mfbang_intro OS)|iApply ty_le_refl|iApply ty_le_refl|].
           iApply sem_typed_sub_ty; first iApply ty_le_uarr; 
            [iApply row_le_refl|iApply ty_le_refl|iApply ty_le_arr|];
            [iApply (@row_le_mfbang_elim _ _ )|iApply ty_le_refl|iApply ty_le_refl|].
           set C := (Œª (Œ∏ : sem_row Œ£), ((! Œ≤ ‚ä∏ ùüô) -{ ¬° Œ∏ }-> ùüô) ‚Üí List (! Œ≤ ‚ä∏ ùüô) -{ ¬° Œ∏ }-‚àò ùüô)%T.
           rewrite -/(C ‚ä•).
           iApply sem_typed_RApp.
           iApply sem_typed_val. iApply iter_typed.
  - set fulfill := ("fulfill", ‚àÄ‚Çú Œ±, Promise (! Œ±) ‚Üí (ùüô -{ coop }-‚àò ! Œ±) ‚ä∏ ùüô).
    smart_apply (sem_typed_let _ _ _ _ [fulfill; main]).
    { iApply (sem_typed_alloc_cpy (Status (! Œ±))). 
      iApply sem_typed_right_inj. iApply sem_typed_nil. }
    set pmain := ("pmain", Ref·∂ú Status (! Œ±)).
    iApply sem_typed_contraction.
    iApply sem_typed_swap_third. iApply sem_typed_swap_second. iApply sem_typed_swap_fourth.
    iApply (sem_typed_seq ùüô).
    + do 2 (iApply sem_typed_app_os; [|iApply sem_typed_var]). 
      iApply sem_typed_sub_u2aarr. 
      set C := (Œª Œ±, Promise (! Œ±) ‚Üí (ùüô -{ coop }-‚àò ! Œ±) ‚ä∏ ùüô)%T.
      rewrite -/(C Œ±).
      iApply sem_typed_TApp. rewrite /C /Promise.
      iApply sem_typed_var.
    + smart_apply (sem_typed_match _ _ _ _ _ []); simpl; [|iApply sem_typed_var|].
      { iApply sem_typed_replace_cpy_os; [iApply sem_typed_var|].
        iApply sem_typed_right_inj. iApply sem_typed_nil. }
      iApply impossible_typed. 
  Qed.
                  
End typing.
